{"version":3,"file":"static/js/549.1cdaf7ac.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilter = state => state.contacts.filter;\n\n//----Получаем подходящие контакты----\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const ContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  font-family: sans-serif;\n  font-size: 28px;\n  padding: 20px;\n  margin: 20px;\n  border: 1px solid #524f4e;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 1), -23px 0 20px -23px rgba(0, 0, 0, 0.8),\n    23px 0 20px -23px rgba(0, 0, 0, 0.8), 0 0 40px rgba(0, 0, 0, 0.1);\n`;\n\nexport const ButtonAdd = styled.button`\n  max-width: 130px;\n  max-height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  padding-left: 10px;\n  padding-right: 10px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 20px;\n\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 400;\n  color: #010101;\n  background: white;\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  transition: 0.3s;\n  &:hover {\n    background: #2ee59d;\n    box-shadow: 0 15px 20px rgba(165, 188, 179, 0.4);\n    color: white;\n    transform: translateY(-7px);\n  }\n`;\n\nexport const InputError = styled.div`\n  background-color: rgb(255, 245, 245);\n  color: rgb(120, 27, 0);\n  display: block;\n  width: 90%;\n\n  padding: 0.5rem 0.75rem;\n  margin-top: 0.5rem;\n  white-space: pre-line;\n`;\n\nexport const FormInput = styled(Field)`\n  display: flex;\n  min-width: 90%;\n  height: 40px;\n  margin-top: 10px;\n  font-family: sans-serif;\n  font-size: 28px;\n\n  :hover {\n    box-shadow: 0 1px 15px rgb(125, 141, 243),\n      -23px 0 20px -23px rgba(104, 104, 249, 0.8),\n      23px 0 20px -23px rgba(94, 127, 235, 0.8), 0 0 40px rgb(0 0 0 / 10%);\n  }\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  height: 140px;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport 'yup-phone';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport {\n  ContactForm,\n  ButtonAdd,\n  InputError,\n  FormInput,\n  FormLabel,\n} from './ContactForm.styled';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('This field is required'),\n  number: Yup.string().required('This field is required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst FormContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    const names = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (names) {\n      alert(name + ' is already in contacts');\n      return;\n    }\n\n    dispatch(addContact({ name: name, number: number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <ContactForm autoComplete=\"off\">\n        <FormLabel>\n          Name\n          <FormInput placeholder=\"Full name\" type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component={InputError} />\n        </FormLabel>\n        <br />\n        <FormLabel>\n          Number\n          <FormInput\n            placeholder=\"Phone number: +380...\"\n            type=\"tel\"\n            name=\"number\"\n          />\n          <ErrorMessage name=\"number\" component={InputError} />\n        </FormLabel>\n        <ButtonAdd type=\"submit\">Submit</ButtonAdd>\n      </ContactForm>\n    </Formik>\n  );\n};\n\nexport default FormContacts;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 30px auto;\n  padding: 15px 20px;\n  width: 700px;\n  border-radius: 8px;\n`;\n\nexport const Header = styled.h1`\n  font-size: 30px;\n  font-weight: 700;\n  margin-bottom: 10px;\n  text-align: center;\n  font-family: 'Montserrat', sans-serif;\n`;\n\nexport const Loader = styled.div`\n  display: flex;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  justify-content: center;\n`;\n","import styled from '@emotion/styled';\n\nexport const ItemContact = styled.li`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 10px;\n`;\n\nexport const ButtonDeleteContact = styled.button`\n  max-width: 130px;\n  max-height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  padding-left: 10px;\n  padding-right: 10px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 20px;\n  margin-right: 25px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 400;\n  color: #524f4e;\n  background: white;\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  transition: 0.3s;\n  &:hover {\n    background: #ea450f;\n    box-shadow: 0 15px 20px rgba(165, 188, 179, 0.4);\n    color: white;\n    transform: translateY(-7px);\n  }\n`;\n","import { PropTypes } from 'prop-types';\n\nimport { ItemContact, ButtonDeleteContact } from './ContactItem.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactItem = contact => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <>\n      <ItemContact>\n        <p>\n          {contact.name}: {contact.number}\n        </p>\n        <ButtonDeleteContact\n          type=\"button\"\n          onClick={() => handleDelete(contact.id)}\n        >\n          Delete\n        </ButtonDeleteContact>\n      </ItemContact>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const ListContacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 50px;\n  font-family: sans-serif;\n  font-size: 28px;\n  margin: 20px;\n  border: 1px solid #524f4e;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 1), -23px 0 20px -23px rgba(0, 0, 0, 0.8),\n    23px 0 20px -23px rgba(0, 0, 0, 0.8), 0 0 40px rgba(0, 0, 0, 0.1);\n`;\n","import ContactItem from '../ContactItem';\nimport { ListContacts } from './ContactsList.styled';\n\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ListContacts>\n      {contacts.length\n        ? contacts.map(({ name, number, id }) => (\n            <ContactItem key={id} name={name} number={number} id={id} />\n          ))\n        : 'No contacts'}\n    </ListContacts>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\n\nexport const FormInput = styled.input`\n  display: flex;\n  width: 300px;\n  padding-left: 45px;\n  margin: 10px auto;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 20px;\n  height: 40px;  \n  background-repeat: no-repeat;\n  background-image: url('data:image/svg+xml,\\\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 470 470\" width=\"40\" height=\"40\">\\\n  <path d=\"M496.131 435.698 374.855 332.551c-12.537-11.283-25.945-16.463-36.776-15.963C366.707 283.054 384 239.549 384 192 384 85.961 298.039 0 192 0S0 85.961 0 192s85.961 192 192 192c47.549 0 91.054-17.293 124.588-45.922-.5 10.831 4.68 24.239 15.963 36.776L435.698 496.13c17.661 19.623 46.511 21.277 64.11 3.678s15.946-46.449-3.677-64.11zM192 320c-70.692 0-128-57.308-128-128S121.308 64 192 64s128 57.308 128 128-57.307 128-128 128z\"/>\\\n  </svg>');\n\n  :hover {\n  box-shadow: 0 1px 15px rgb(125, 141, 243),\n    -23px 0 20px -23px rgba(104, 104, 249, 0.8),\n    23px 0 20px -23px rgba(94, 127, 235, 0.8), 0 0 40px rgb(0 0 0 / 10%);\n}\n}\n`;\n","import { FormInput } from './Filter.styled.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  function onChangeFilter(event) {\n    dispatch(contactsFilter(event.currentTarget.value));\n  }\n  return (\n    <label>\n      <FormInput\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        placeholder=\"Find contacts by name\"\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport SyncLoader from 'react-spinners/SyncLoader';\n\nimport ContactForm from '../../components/ContactForm/ContactForm';\n// import { Filter } from '../../components/Filter/Filter';\n// import { ContactsList } from '../../components/ContactsList/ContactsList';\n\nimport { Container, Header, Loader } from './Contacts.styled';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Header>Phonebook</Header>\n      <ContactForm />\n\n      <Filter />\n      <Header>Contacts</Header>\n\n      {isLoading && !error ? (\n        <Loader>\n          <SyncLoader color=\"#2f9e99\" />\n        </Loader>\n      ) : (\n        <ContactsList />\n      )}\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","styled","Form","ButtonAdd","InputError","FormInput","Field","FormLabel","validationSchema","Yup","required","number","initialValues","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","find","alert","addContact","autoComplete","placeholder","type","component","Container","Header","Loader","ItemContact","ButtonDeleteContact","onClick","id","deleteContact","ListContacts","length","map","value","onChange","event","contactsFilter","currentTarget","Contacts","useEffect","fetchContacts","color"],"sourceRoot":""}